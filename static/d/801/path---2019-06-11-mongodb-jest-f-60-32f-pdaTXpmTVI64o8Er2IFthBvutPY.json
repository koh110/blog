{"data":{"site":{"siteMetadata":{"title":"kohsweblog","author":"koh110"}},"markdownRemark":{"id":"0e6931e7-c329-577c-ac28-c9d79bf3e229","excerpt":"はじめにMongoDB のテストを書いて、自分なりの方法が落ち着いたのでまとめる。結論: mongodb-memory-server を利用する。本物の MongoDB を使う方法（不採用）自分は middleware…","html":"<h2 id=\"はじめに\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h2>\n<p>MongoDB のテストを書いて、自分なりの方法が落ち着いたのでまとめる。</p>\n<p>結論: <a href=\"https://www.npmjs.com/package/mongodb-memory-server\" target=\"_blank\">mongodb-memory-server</a> を利用する。</p>\n<h2 id=\"本物の-mongodb-を使う方法（不採用）\"><a href=\"#%E6%9C%AC%E7%89%A9%E3%81%AE-mongodb-%E3%82%92%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%8D%E6%8E%A1%E7%94%A8%EF%BC%89\" aria-label=\"本物の mongodb を使う方法（不採用） permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>本物の MongoDB を使う方法（不採用）</h2>\n<p>自分は middleware なども含めてテストするために、実環境と同じ環境を用意して単体テスト時もそれらを利用するのが基本方針だった。</p>\n<p>そこで MongoDB のテストもテスト用の DB を用意したが、DB を利用したテストでつきまとうテストの ABA 問題（初期化処理が二重に走って後続のテストが失敗する）に引っかかり、解決策を考えていた。</p>\n<p>普段は並列数に合わせて <code class=\"language-text\">CREATE DATABASE</code> して DB 接続部分でそれぞれ被らないようにつなげる、という手法をよくやるのだが、Jest で並列数を固定化する方法にたどり着けなかった。</p>\n<p>テスト開始のたびに自動で増やし続けてもいいが、ちょっとコストがかさみすぎるかなということで不採用とした。</p>\n<h2 id=\"jest-公式が提示する方法（不採用）\"><a href=\"#jest-%E5%85%AC%E5%BC%8F%E3%81%8C%E6%8F%90%E7%A4%BA%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%8D%E6%8E%A1%E7%94%A8%EF%BC%89\" aria-label=\"jest 公式が提示する方法（不採用） permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jest 公式が提示する方法（不採用）</h2>\n<p><a href=\"https://jestjs.io/docs/en/mongodb\">https://jestjs.io/docs/en/mongodb</a></p>\n<p>ちゃんと Jest のドキュメントを読んでいると MongoDB のテストについてちゃんと記載があった。</p>\n<p><code class=\"language-text\">@shelf/jest-mongodb</code> というモジュールを使う方法だったので中身を読んでみた。</p>\n<p><a href=\"https://www.npmjs.com/package/@shelf/jest-mongodb\">https://www.npmjs.com/package/@shelf/jest-mongodb</a></p>\n<p><a href=\"https://github.com/shelfio/jest-mongodb\">https://github.com/shelfio/jest-mongodb</a></p>\n<p>中を見てみると、やっていることは Global Setup 時に mongodb-memory-server を立ち上げて、 Global Teardown 時に掃除しているだけだった。</p>\n<p>mongodb-memory-server は人気があり活発に開発されているモジュールで、MongoDB の機能をほぼ網羅している。</p>\n<p>jest-mongodb の機能が Setup/Teardown の Utility を提供するだけなのであれば、 mongodb-memory-server を直接使うほうが MongoDB のバージョンアップへの追従やモジュール自体のバグ修正に追いつくことも容易だろうということで、 jest-mongodb は採用しないことにした。</p>\n<p>download 数もそこまで多くなく、更新頻度も流石に mongodb-memory-server に追従はできていなそうだったのも要因のひとつ。</p>\n<h2 id=\"mongodb-memory-server（採用）\"><a href=\"#mongodb-memory-server%EF%BC%88%E6%8E%A1%E7%94%A8%EF%BC%89\" aria-label=\"mongodb memory server（採用） permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mongodb-memory-server（採用）</h2>\n<p><code class=\"language-text\">@shelf/jest-mongodb</code> を参考に Setup/Teardown のスクリプトを自分で用意した。</p>\n<p>setup.ts で MongoMemoryServer インスタンスを起動して global に。接続用の URI はアプリケーションが環境変数から読み込む仕様だったので環境変数に。</p>\n<p>TypeScript で書いているわけだし本来は global の namespace にきちんと MongoMemoryServer の型を追加するべきなんだろうけど、テストコードでこのインスタンスにふれる事も少ないので any としてしまった。TypeScript は頑張りすぎないように書く方針。</p>\n<p>最近は ; 省略派なので global への追加部分がちょっと読みづらくなってしまったが、あまり頻繁に手を加える部分じゃないので目をつぶる。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MongoMemoryServer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mongodb-memory-server'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mongoServer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoMemoryServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> mongoUri <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> mongoServer<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>global <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MONGO_MEMORY_SERVER</span> <span class=\"token operator\">=</span> mongoServer\n  process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MONGODB_TEST_URI</span> <span class=\"token operator\">=</span> mongoUri\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>teardown.ts は単純に global にある MongoMemoryServer を停止して終了。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span>global <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MONGO_MEMORY_SERVER</span><span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>あとはテストの beforeAll と afterAll で db に接続すればテストができる。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n<span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  client <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> MongoClient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MONGODB_TEST_URI</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    useNewUrlParser<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// test</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>メモリ上で動くので高速に動作するし、並列テストも容易。さらに実際の DB を用意する必要がなくなったので CI 上でも実行しやすくなった。</p>\n<p>実際の MongoDB で動かすのはパターンを絞って e2e テストなどで対応しようと思う。</p>\n<h2 id=\"まとめ\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p><a href=\"https://www.npmjs.com/package/mongodb-memory-server\" target=\"_blank\">mongodb-memory-server</a> を利用して MongoDB + Jest のテストをできるようにした。</p>","tableOfContents":"<ul>\n<li><a href=\"/2019-06-11-mongodb-jest/#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">はじめに</a></li>\n<li><a href=\"/2019-06-11-mongodb-jest/#%E6%9C%AC%E7%89%A9%E3%81%AE-mongodb-%E3%82%92%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%8D%E6%8E%A1%E7%94%A8%EF%BC%89\">本物の MongoDB を使う方法（不採用）</a></li>\n<li><a href=\"/2019-06-11-mongodb-jest/#jest-%E5%85%AC%E5%BC%8F%E3%81%8C%E6%8F%90%E7%A4%BA%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%8D%E6%8E%A1%E7%94%A8%EF%BC%89\">Jest 公式が提示する方法（不採用）</a></li>\n<li><a href=\"/2019-06-11-mongodb-jest/#mongodb-memory-server%EF%BC%88%E6%8E%A1%E7%94%A8%EF%BC%89\">mongodb-memory-server（採用）</a></li>\n<li><a href=\"/2019-06-11-mongodb-jest/#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>","frontmatter":{"title":"MongoDB + Jestのテスト方法","date":"2019-06-11"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-06-11-mongodb-jest/","previous":{"fields":{"slug":"/2019-06-07-mongodb-typescript/"},"frontmatter":{"title":"MongoDB + Node.js + TypeScriptが強力だった"}},"next":null}}