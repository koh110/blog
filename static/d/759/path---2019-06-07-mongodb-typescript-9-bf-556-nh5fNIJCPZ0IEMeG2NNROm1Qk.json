{"data":{"site":{"siteMetadata":{"title":"kohsweblog","author":"koh110"}},"markdownRemark":{"id":"6a6d9c23-fec9-52c7-b7f1-4bec92d93879","excerpt":"はじめにMongoDB (node-mongodb-native) + Ndoe.js + TypeScript で RDB 並のスキーマ定義と、NoSQL の開発しやすさを両立できたのでまとめます。Node.js と MongoDBMongoDB はドキュメント指向データベースです。簡単に言えば JSON…","html":"<h2 id=\"はじめに\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h2>\n<p>MongoDB (node-mongodb-native) + Ndoe.js + TypeScript で RDB 並のスキーマ定義と、NoSQL の開発しやすさを両立できたのでまとめます。</p>\n<h2 id=\"nodejs-と-mongodb\"><a href=\"#nodejs-%E3%81%A8-mongodb\" aria-label=\"nodejs と mongodb permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js と MongoDB</h2>\n<p>MongoDB はドキュメント指向データベースです。簡単に言えば JSON のような形でデータを保持できる NoSQL です。</p>\n<p>MySQL や Postgres などの RDB と違い、事前に CREATE TABLE のようなコマンドを打たなくても、insert されたタイミングで collection が作成され、データが保存されます。</p>\n<p>また、MongoDB は後発のデータベースということもあり、RDB では 1 クエリで素直に表すことが難しいクエリも多くがクエリ化されていて 1 トランザクションで実行が可能です。（findOrUpdate など）</p>\n<p>この柔軟性は非常に強力で、開発開始までのオーバーヘッドを大きく下げてくれます。</p>\n<p>しかし、その柔軟さ故に後から加わった開発者がコードからデータの構造を読み取るのが難しいという難点もあります。</p>\n<p>Node.js + MongoDB では <a href=\"https://mongoosejs.com/\" target=\"_blank\">mongoose</a> か <a href=\"http://mongodb.github.io/node-mongodb-native/\">node-mongodb-native</a> が多く利用されます。</p>\n<p>今までは上記のデータ構造の問題に対処するため、mongoose を利用してオブジェクトのスキーマ定義などを行ったりしていました。しかし、mongoose は ORM という特性上内部的に Object へのマッピングなど、パフォーマンスに影響を与えてしまうことが少なくありませんでした。そのためパフォーマンスが要求されるような箇所では mongoose から Object への変換が行われないようにするなど工夫されることが多いですが、そうしてしまうことでまたスキーマ定義がなく自由に使えてしまうというトレードオフが発生していました。</p>\n<p>パフォーマンスの問題にぶつかることも多く、自分は mongoose はあまり使わなくなり node-mongo-native をメインに使っていました。</p>\n<p>ある時、Node.js も TypeScript で全部書いてみようと試してみたところ、node-mongo-native を利用していてもスキーマ定義を TypeScript に任せることができ、データ構造がわかりにくいという問題が解決できてしまいました。</p>\n<h2 id=\"typescript-を組み合わせた-mongodb\"><a href=\"#typescript-%E3%82%92%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%81%9F-mongodb\" aria-label=\"typescript を組み合わせた mongodb permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript を組み合わせた MongoDB</h2>\n<p>下記が MongoDB アクセス用モジュール <code class=\"language-text\">db.ts</code> です。１つの School に対して Student が複数所属する設計とします。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MongoClient<span class=\"token punctuation\">,</span> Collection<span class=\"token punctuation\">,</span> ObjectId <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mongodb'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MONGODB_URI</span> <span class=\"token operator\">=</span> <span class=\"token string\">'mongodb://[user:password]@localhost:27017/example'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> School <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  _id<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> ObjectId\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> Student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  _id<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> ObjectId\n  schoolId<span class=\"token punctuation\">:</span> ObjectId\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> collections<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  school<span class=\"token punctuation\">:</span> Collection<span class=\"token operator\">&lt;</span>School<span class=\"token operator\">></span>\n  student<span class=\"token punctuation\">:</span> Collection<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  school<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  student<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> MongoClient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MONGODB_URI</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    useNewUrlParser<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">db</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">)</span>\n  collections<span class=\"token punctuation\">.</span>schools <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>collection<span class=\"token operator\">&lt;</span>School<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'schools'</span><span class=\"token punctuation\">)</span>\n  collections<span class=\"token punctuation\">.</span>students <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>collection<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'students'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ちなみにサーバー側はこんな感じで DB に接続が完了したら listen を開始するようにします。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'http'</span>\n<span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> db <span class=\"token keyword\">from</span> <span class=\"token string\">'./db'</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Listening on'</span><span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ここで Student にひとつレコードを追加するコードを見てみましょう。</p>\n<p><code class=\"language-text\">db.collections.student</code> は db モジュールの中で型定義がされているので <code class=\"language-text\">Student</code> 型以外のオブジェクトを insertOne に与えようとすると TypeScript がエラーを返します。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ObjectId <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mongodb'</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> db <span class=\"token keyword\">from</span> <span class=\"token string\">'./db'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addStudent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">schoolId<span class=\"token punctuation\">:</span> ObjectId<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    schoolId<span class=\"token punctuation\">:</span> schoolId<span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> name\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span>collections<span class=\"token punctuation\">.</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">insertOne</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>addStudent は引数以外で型定義も行っておらず JavaScript と変わらない書き味であるにもかかわらず、insert するべきオブジェクトが型安全になるというメリットが得られます。もちろんこれらの型は find や update などにも適用されます。</p>\n<p>さらにこの型が強力なのは、交差型を利用することで MongoDB の aggregate（RDB でいう join）でも型を使って効率よく開発できることです。</p>\n<p>下記のコードは students コレクションから school というパラメータに school コレクションのデータを id をもとに join するサンプルです。</p>\n<p>この部分 <code class=\"language-text\">.aggregate&lt;db.Student &amp; { school: db.School }&gt;</code> がキモのコードで、交差型を使うことで Student 型に School 型の schrool パラメータを追加しています。こうすることで、aggregate の return が any にならず型の補助を受けられます。（lookup に合わせて自分で交差型を適切に書かないといけない部分は若干イケてないと思うがうまい方法を思いついていない。）</p>\n<p>本来は toArray せずに cursor にして map を使わない方がきっとパフォーマンスはいいです。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ObjectId <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mongodb'</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> db <span class=\"token keyword\">from</span> <span class=\"token string\">'./db'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">studentId<span class=\"token punctuation\">:</span> ObjectId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span>collections<span class=\"token punctuation\">.</span>students\n    <span class=\"token punctuation\">.</span>aggregate<span class=\"token operator\">&lt;</span>db<span class=\"token punctuation\">.</span>Student <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> school<span class=\"token punctuation\">:</span> db<span class=\"token punctuation\">.</span>School <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        $match<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> _id<span class=\"token punctuation\">:</span> studentId <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        $lookup<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">from</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'schools'</span><span class=\"token punctuation\">,</span>\n          localField<span class=\"token punctuation\">:</span> <span class=\"token string\">'schoolId'</span><span class=\"token punctuation\">,</span>\n          foreignField<span class=\"token punctuation\">:</span> <span class=\"token string\">'_id'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'school'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> students\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">student</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        _id<span class=\"token punctuation\">:</span> student<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> student<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// schoolId: student.schoolId,</span>\n        school<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          _id<span class=\"token punctuation\">:</span> student<span class=\"token punctuation\">.</span>school<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> student<span class=\"token punctuation\">.</span>school<span class=\"token punctuation\">.</span>name\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"まとめ\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>Ndoe.js + MongoDB (node-mongodb-native) + TypeScript の組み合わせを用いることで RDB 並のスキーマ定義と、NoSQL の開発しやすさを両立できました。</p>","tableOfContents":"<ul>\n<li><a href=\"/2019-06-07-mongodb-typescript/#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">はじめに</a></li>\n<li><a href=\"/2019-06-07-mongodb-typescript/#nodejs-%E3%81%A8-mongodb\">Node.js と MongoDB</a></li>\n<li><a href=\"/2019-06-07-mongodb-typescript/#typescript-%E3%82%92%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%81%9F-mongodb\">TypeScript を組み合わせた MongoDB</a></li>\n<li><a href=\"/2019-06-07-mongodb-typescript/#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>","frontmatter":{"title":"MongoDB + Node.js + TypeScriptが強力すぎた","date":"2019-06-07"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-06-07-mongodb-typescript/","previous":{"fields":{"slug":"/2019-01-03-chat/"},"frontmatter":{"title":"チャットシステムを作るときに知っておくべきこと"}},"next":null}}