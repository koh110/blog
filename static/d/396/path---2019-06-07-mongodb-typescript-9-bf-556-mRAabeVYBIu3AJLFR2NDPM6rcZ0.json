{"data":{"site":{"siteMetadata":{"title":"kohsweblog","author":"koh110"}},"markdownRemark":{"id":"6a6d9c23-fec9-52c7-b7f1-4bec92d93879","excerpt":"Node.js と MongoDBMongoDB はドキュメント指向データベースです。簡単に言えば JSON のような形でデータを保持できる NoSQL です。MySQL や Postgres などの RDB と違い、事前に CREATE TABLE のようなコマンドを打たなくても、insert…","html":"<h2 id=\"nodejs-と-mongodb\"><a href=\"#nodejs-%E3%81%A8-mongodb\" aria-label=\"nodejs と mongodb permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js と MongoDB</h2>\n<p>MongoDB はドキュメント指向データベースです。簡単に言えば JSON のような形でデータを保持できる NoSQL です。</p>\n<p>MySQL や Postgres などの RDB と違い、事前に CREATE TABLE のようなコマンドを打たなくても、insert されたタイミングで collection が作成され、データが保存されます。</p>\n<p>また、MongoDB は後発のデータベースということもあり、RDB では 1 クエリで素直に表すことが難しいクエリも多くがクエリ化されていて 1 トランザクションで実行が可能です。（findOrUpdate など）</p>\n<p>この柔軟性は非常に強力で、開発開始までのオーバーヘッドを大きく下げてくれます。</p>\n<p>しかし、その柔軟さ故に後から加わった開発者がコードからデータの構造を読み取るのが難しいという難点もあります。</p>\n<p>Node.js + MongoDB では <a href=\"https://mongoosejs.com/\" target=\"_blank\">mongoose</a> か <a href=\"http://mongodb.github.io/node-mongodb-native/\">node-mongodb-native</a> が多く利用されます。</p>\n<p>今までは上記のデータ構造の問題に対処するため、mongoose を利用してオブジェクトのスキーマ定義などを行ったりしていました。しかし、mongoose は ORM という特性上内部的に Object へのマッピングなど、パフォーマンスに影響を与えてしまうことが少なくありませんでした。そのためパフォーマンスが要求されるような箇所では mongoose から Object への変換が行われないようにするなど工夫されることが多いですが、そうしてしまうことでまたスキーマ定義がなく自由に使えてしまうというトレードオフが発生していました。</p>\n<p>パフォーマンスの問題にぶつかることも多く、自分は mongoose はあまり使わなくなり node-mongo-native をメインに使っていました。</p>\n<p>ある時、Node.js も TypeScript で全部書いてみようと試してみたところ、node-mongo-native を利用していてもスキーマ定義を TypeScript に任せることができ、問題となっていたデータ構造がわかりにくいという問題が解決できてしまったため、この記事でまとめてみようと思います。</p>\n<h2 id=\"typescript-を組み合わせた-mongodb\"><a href=\"#typescript-%E3%82%92%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%81%9F-mongodb\" aria-label=\"typescript を組み合わせた mongodb permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript を組み合わせた MongoDB</h2>\n<p>下記にデータベースにアクセスするファイルの example を記載します。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript:src/lib/db.ts\"><pre class=\"language-typescript:src/lib/db.ts\"><code class=\"language-typescript:src/lib/db.ts\">import { MongoClient, Collection, ObjectId } from &#39;mongodb&#39;\n\nconst MONGODB_URI = &#39;mongodb://[user:password]@localhost:27017/example&#39;\n\ntype Test = {\n  _id: ObjectId\n  aa: string\n  bb: string\n}\n\nexport collections: {\n  test: Collection&lt;Test&gt;\n} = {\n  test: null\n}\n\nexport async function connect() {\n  const client = await MongoClient.connect(MONGODB_URI, {\n    useNewUrlParser: true\n  })\n\n  collections.test = client.db(&#39;example&#39;).collection&lt;Test&gt;(&#39;test&#39;)\n}</code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/2019-06-07-mongodb-typescript/#nodejs-%E3%81%A8-mongodb\">Node.js と MongoDB</a></li>\n<li><a href=\"/2019-06-07-mongodb-typescript/#typescript-%E3%82%92%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%81%9F-mongodb\">TypeScript を組み合わせた MongoDB</a></li>\n</ul>","frontmatter":{"title":"MongoDB + Node.js + TypeScriptが強力すぎた","date":"2019-06-07"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-06-07-mongodb-typescript/","previous":{"fields":{"slug":"/2019-01-03-chat/"},"frontmatter":{"title":"チャットシステムを作るときに知っておくべきこと"}},"next":null}}