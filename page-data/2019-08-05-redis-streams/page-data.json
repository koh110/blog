{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-08-05-redis-streams/","result":{"data":{"site":{"siteMetadata":{"title":"kohsweblog","author":"koh110"}},"markdownRemark":{"id":"e45dfa13-32b4-5be9-acb6-7209756f0dea","excerpt":"はじめに Redis Streams とはざっくりいうと Redis v5 から加わった Pub/Sub とはまた違うキューイングの仕組みです。 https://redis.io/topics/streams-intro Pub/Sub は Subscribe したら揮発してしまうのに対して、Streams…","html":"<h1 id=\"はじめに\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h1>\n<p>Redis Streams とはざっくりいうと Redis v5 から加わった Pub/Sub とはまた違うキューイングの仕組みです。</p>\n<p><a href=\"https://redis.io/topics/streams-intro\">https://redis.io/topics/streams-intro</a></p>\n<p>Pub/Sub は Subscribe したら揮発してしまうのに対して、Streams はキューが詰められるときに指定した Max を超えたものが押し出されて消える仕組みです。</p>\n<p>登録した Stream に対して購読グループを複数作ったりすることで、1 つの Stream に対して個別のグループで購読管理ができたりします。（Kafka で導入されたアイデアを輸入したもの）</p>\n<p>今回は上記のグループを使わずにキューを複数プロセスで受け取る実装のサンプルと、自分が勘違いしていた部分をまとめます。</p>\n<h1 id=\"stream-を触ってみる\"><a href=\"#stream-%E3%82%92%E8%A7%A6%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"stream を触ってみる permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stream を触ってみる</h1>\n<p>キューの追加は XADD というコマンドを使います。</p>\n<p>かんたんに各項目を説明すると下記のようになります。</p>\n<ul>\n<li>stream-sample: キューを追加する Stream</li>\n<li>MAXLEN 10: 10 個までキューを保持する（すでに 10 個キューがあったら先頭から削除されていく）</li>\n<li>message test: <code class=\"language-text\">message</code> という key に対して <code class=\"language-text\">test</code> という value を入れる</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XADD stream-sample MAXLEN <span class=\"token number\">10</span> * message <span class=\"token builtin class-name\">test</span>\n<span class=\"token string\">\"1565014160054-0\"</span></code></pre></div>\n<p>この追加したキューを読み取るには XREAD というコマンドを使います</p>\n<p><code class=\"language-text\">STREAMS stream-sample</code> で読み込む Stream を指定し、次に読み込む ID を指定します。ここで指定した ID 以降の値が読み込まれますが、0 を指定すると先頭から読み込みます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XREAD STREAMS stream-sample <span class=\"token number\">0</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"stream-sample\"</span>\n   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565014160054-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test\"</span>\n\n<span class=\"token comment\"># 2つ追加してみる</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XADD stream-sample MAXLEN <span class=\"token number\">10</span> * message test2\n<span class=\"token string\">\"1565014529460-0\"</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XADD stream-sample MAXLEN <span class=\"token number\">10</span> * message test3\n<span class=\"token string\">\"1565014577669-0\"</span>\n\n<span class=\"token comment\"># 最初のIDを指定して読み込むと、それ以降に追加されたキューが読み込まれる。</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XREAD STREAMS stream-sample <span class=\"token number\">1565014160054</span>-0\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"stream-sample\"</span>\n   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565014529460-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test2\"</span>\n      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565014577669-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test3\"</span>\n\n<span class=\"token comment\"># 0を指定すると最初から読み込む</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XREAD STREAMS stream-sample <span class=\"token number\">0</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"stream-sample\"</span>\n   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565014160054-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test\"</span>\n      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565014529460-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test2\"</span>\n      <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565014577669-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test3\"</span>\n\n<span class=\"token comment\"># MAXLEN を 2 に指定してキューに突っ込んでみる</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XADD stream-sample MAXLEN <span class=\"token number\">2</span> * message test4\n<span class=\"token string\">\"1565014734414-0\"</span>\n\n<span class=\"token comment\"># 2 個になるようにキューが先頭から削除される</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XREAD STREAMS stream-sample <span class=\"token number\">0</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"stream-sample\"</span>\n   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565014577669-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test3\"</span>\n      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565014734414-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test4\"</span></code></pre></div>\n<p>これだけではキューが追加されたことを検知できないので、このままではキューとしては使えません。</p>\n<p>キューの追加を Subscribe するために XREAD で BLOCK というオプションを使います。</p>\n<h1 id=\"キューを待ち受ける\"><a href=\"#%E3%82%AD%E3%83%A5%E3%83%BC%E3%82%92%E5%BE%85%E3%81%A1%E5%8F%97%E3%81%91%E3%82%8B\" aria-label=\"キューを待ち受ける permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>キューを待ち受ける</h1>\n<p><code class=\"language-text\">BLOCK 0</code>: キューを指定時間まで待ち受ける。0 を指定するとタイムアウトせずに待ち受ける。</p>\n<p>ここで新しい <code class=\"language-text\">$</code> という特殊な ID が出てきます。先のサンプルでは 0 か ID を直接指定していましたが、 <code class=\"language-text\">$</code> を指定すると XREAD をはじめたタイミングからあとに追加されたものを受け取る、という特別な振る舞いをします。</p>\n<p><a href=\"https://redis.io/commands/xread#the-special-codecode-id\">https://redis.io/commands/xread#the-special-codecode-id</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XREAD BLOCK <span class=\"token number\">0</span> STREAMS stream-sample $\n\n<span class=\"token comment\"># キューが追加されるまで接続が開きっぱなしになるので、別プロセスから XADD してキューを追加する</span>\n\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"stream-sample\"</span>\n   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565015282007-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test\"</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>.06s<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">XREAD BLOCK</code> を複数プロセスで同時に起動すると、一対多に伝播するキューが実装できます。</p>\n<p>また、XREAD には COUNT というオプションもあり、READ するキューの個数を設定することができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 全部で3つのキューが入っている</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XREAD STREAMS stream-sample <span class=\"token number\">0</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"stream-sample\"</span>\n   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565015282007-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test\"</span>\n      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565016161343-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test2\"</span>\n      <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565016381246-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test3\"</span>\n\n<span class=\"token comment\"># COUNT 2 を指定すると2つだけ取り出せる</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XREAD COUNT <span class=\"token number\">2</span> STREAMS stream-sample <span class=\"token number\">0</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"stream-sample\"</span>\n   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565015282007-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test\"</span>\n      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565016161343-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"test2\"</span></code></pre></div>\n<p>つまり <code class=\"language-text\">XREAD BLOCK 0 COUNT 100 STREAMS stream-sample $</code> というコマンドをループし続けると、100 個のキューを読み込む consumer が作れると思いました。\nが、これは勘違いでバグを埋め込むことになっていまいました。</p>\n<h1 id=\"block-と-count-オプションを同時に使う落とし穴\"><a href=\"#block-%E3%81%A8-count-%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E5%90%8C%E6%99%82%E3%81%AB%E4%BD%BF%E3%81%86%E8%90%BD%E3%81%A8%E3%81%97%E7%A9%B4\" aria-label=\"block と count オプションを同時に使う落とし穴 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BLOCK と COUNT オプションを同時に使う落とし穴</h1>\n<p>先に結論を言ってしまうと、ほぼ同時にキューが詰め込まれると意図とずれた挙動が発生します。手で実行しているとほぼ同時にキューが詰め込まれることがないのでなかなか気づけません。</p>\n<p>Node.js でごく短時間に 10 個のキューを追加するコードを書いてみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Redis <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ioredis'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> redis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Redis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  host<span class=\"token punctuation\">:</span> <span class=\"token string\">'127.0.0.1'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">xadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stream-sample'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">message-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    promises<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>追加されたキューを確認してみると同じ時刻に追加されたキューは ID に suffix に数字がついで区別される仕組みのようです。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XREAD STREAMS stream-sample <span class=\"token number\">0</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"stream-sample\"</span>\n   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565017990806-0\"</span>\n          <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n             <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message-0\"</span>\n       <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565017990806-1\"</span>\n          <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n             <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message-1\"</span>\n       <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565017990807-0\"</span>\n          <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n             <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message-2\"</span>\n       <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565017990808-0\"</span>\n          <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n             <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message-3\"</span>\n       <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565017990808-1\"</span>\n          <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n             <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message-4\"</span>\n       <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565017990808-2\"</span>\n          <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n             <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message-5\"</span>\n       <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565017990808-3\"</span>\n          <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n             <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message-6\"</span>\n       <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565017990808-4\"</span>\n          <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n             <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message-7\"</span>\n       <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565017990808-5\"</span>\n          <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n             <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message-8\"</span>\n      <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565017990808-6\"</span>\n          <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n             <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message-9\"</span></code></pre></div>\n<p>ここで、先述の BLOCK と COUNT を使った consumer を用意してみます。期待としては <code class=\"language-text\">COUNT 20</code> としているので、新しく追加された 10 個のキューが全部とれて欲しいですが、実際にとれるのは 1 つめのに追加されたキューだけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XREAD BLOCK <span class=\"token number\">0</span> COUNT <span class=\"token number\">20</span> STREAMS stream-sample $\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"stream-sample\"</span>\n   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1565018255786-0\"</span>\n         <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message-0\"</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>.61s<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Redis の issue を調べてみると <code class=\"language-text\">$</code> を使って待ち受けているときの仕様のようです。</p>\n<p><a href=\"https://github.com/antirez/redis/issues/5543\">https://github.com/antirez/redis/issues/5543</a></p>\n<p>確かに <code class=\"language-text\">$</code> は XREAD した時から初めて XADD された瞬間に発火する、と考えれば最初のひとつしか取り出せないというのは理解できます。</p>\n<p>しかも <code class=\"language-text\">$</code> を使った XREAD ループすると最初の 1 つ以降のキューはすでに追加されたあとなので、残り 9 個のキューは受け取れず過ぎ去ってしまいます。</p>\n<p>そこで、キューを待ち受ける consumer を作るためには、起動時には <code class=\"language-text\">$</code> で待ち受け、それ以降は最後に受け取った ID を指定するというコードが必要になります。</p>\n<p>下記のようなイメージです。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>startId <span class=\"token operator\">=</span> <span class=\"token string\">'$'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> nextId <span class=\"token operator\">=</span> startId <span class=\"token operator\">?</span> startId <span class=\"token punctuation\">:</span> <span class=\"token string\">'$'</span>\n\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">xread</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BLOCK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'COUNT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'20'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'STREAMS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stream-sample'</span><span class=\"token punctuation\">,</span> startId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">,</span> messages<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextId <span class=\"token operator\">=</span> id\n      <span class=\"token comment\">// 何かしらの処理</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>nextId<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"まとめ\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h1>\n<p>XREAD と BLOCK, COUNT を使ってキューを実装する時は、 <code class=\"language-text\">$</code> だけでなく最後に受け取った ID を保持して読み込む ID をずらす必要があります。</p>","tableOfContents":"<ul>\n<li><a href=\"/2019-08-05-redis-streams/#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">はじめに</a></li>\n<li><a href=\"/2019-08-05-redis-streams/#stream-%E3%82%92%E8%A7%A6%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">Stream を触ってみる</a></li>\n<li><a href=\"/2019-08-05-redis-streams/#%E3%82%AD%E3%83%A5%E3%83%BC%E3%82%92%E5%BE%85%E3%81%A1%E5%8F%97%E3%81%91%E3%82%8B\">キューを待ち受ける</a></li>\n<li><a href=\"/2019-08-05-redis-streams/#block-%E3%81%A8-count-%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E5%90%8C%E6%99%82%E3%81%AB%E4%BD%BF%E3%81%86%E8%90%BD%E3%81%A8%E3%81%97%E7%A9%B4\">BLOCK と COUNT オプションを同時に使う落とし穴</a></li>\n<li><a href=\"/2019-08-05-redis-streams/#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>","frontmatter":{"title":"Redis Streamsでキューを実装するときの注意点","date":"2019-08-05"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-08-05-redis-streams/","previous":{"fields":{"slug":"/2019-07-02-ubuntu-setup/"},"frontmatter":{"title":"さくらで借りたUbuntu16のセットアップ"}},"next":{"fields":{"slug":"/2019-10-13-vscode-vim/"},"frontmatter":{"title":"VSCode + Vim Plugin が異常に重くなる件の対処法"}}}}}