{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-07-02-jest-speedup/","result":{"data":{"site":{"siteMetadata":{"title":"kohsweblog","author":"koh110"}},"markdownRemark":{"id":"fb2ab6f7-ee49-5974-ae3d-7788e94864f2","excerpt":"課題 お手伝いしているシステムでNestJSを採用しているバックエンドのテストが遅いという課題があったので対処した。 前提 フレームワーク DB テストランナー その他 NestJS postgres jest TypeScript, ts-jest テストの総数は700弱。 最終結果 最終的には…","html":"<h1 id=\"課題\" style=\"position:relative;\"><a href=\"#%E8%AA%B2%E9%A1%8C\" aria-label=\"課題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>課題</h1>\n<p>お手伝いしているシステムでNestJSを採用しているバックエンドのテストが遅いという課題があったので対処した。</p>\n<h1 id=\"前提\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E6%8F%90\" aria-label=\"前提 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前提</h1>\n<table>\n<thead>\n<tr>\n<th>フレームワーク</th>\n<th>DB</th>\n<th>テストランナー</th>\n<th>その他</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NestJS</td>\n<td>postgres</td>\n<td>jest</td>\n<td>TypeScript, ts-jest</td>\n</tr>\n</tbody>\n</table>\n<p>テストの総数は700弱。</p>\n<h1 id=\"最終結果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E7%B5%90%E6%9E%9C\" aria-label=\"最終結果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終結果</h1>\n<p>最終的には2段階の改修を経てローカルのテストが3倍速程度高速化した。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># before</span>\nTest Suites: <span class=\"token number\">145</span> passed, <span class=\"token number\">145</span> total\nTests:       <span class=\"token number\">2</span> skipped, <span class=\"token number\">681</span> passed, <span class=\"token number\">683</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">925.063</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites.\nDone <span class=\"token keyword\">in</span> <span class=\"token number\">926</span>.48s.\n\n<span class=\"token comment\"># ts-jestを@swc/jestに置き換えた</span>\nTest Suites: <span class=\"token number\">145</span> passed, <span class=\"token number\">145</span> total\nTests:       <span class=\"token number\">2</span> skipped, <span class=\"token number\">681</span> passed, <span class=\"token number\">683</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">613.74</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites.\nDone <span class=\"token keyword\">in</span> <span class=\"token number\">615</span>.33s.\n\n<span class=\"token comment\"># 4並列にした</span>\nTest Suites: <span class=\"token number\">145</span> passed, <span class=\"token number\">145</span> total\nTests:       <span class=\"token number\">2</span> skipped, <span class=\"token number\">681</span> passed, <span class=\"token number\">683</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">293.974</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites.\nDone <span class=\"token keyword\">in</span> <span class=\"token number\">310</span>.08s.</code></pre></div>\n<p>ただ、トランスパイラの置き換え（ts-jest -> @swc/jest）とworker数の増加だけではCI上の実行時間は変わらなかった。\nそのため、ローカルとCIでは別の並列化を行い、最終的にはCIの実行速度も3倍速程度まで高速化した。</p>\n<h1 id=\"戦略\" style=\"position:relative;\"><a href=\"#%E6%88%A6%E7%95%A5\" aria-label=\"戦略 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>戦略</h1>\n<p>TypeScriptで記述されたテストであったため、コストの低い対策として高速なトランスパイラーへの置き換えを検証した。\nまた、コストは高いが確実な方法としてDBのテストを直列から並列に変更する方法を検証した。</p>\n<ul>\n<li>トランスパイラーの置き換え\n<ul>\n<li>@swc/jestへ置き換え（採用）</li>\n<li>vitestへ置き換え（失敗）</li>\n</ul>\n</li>\n<li>テストの並列化\n<ul>\n<li><code class=\"language-text\">--runInBand</code> の削除</li>\n<li><code class=\"language-text\">--maxWorkers=4</code> の追加</li>\n<li>並列数分のDBを用意</li>\n<li>テスト時にworkerのインデックスを取得してDBをつなぎ分ける</li>\n</ul>\n</li>\n<li>CIの並列化\n<ul>\n<li><code class=\"language-text\">--shard</code> オプションの利用（採用）</li>\n<li>CIのテストステップを4分割</li>\n<li><code class=\"language-text\">--maxWorkers=4</code> で動かす（失敗）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"トランスパイラーの置き換え\" style=\"position:relative;\"><a href=\"#%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B9%E3%83%91%E3%82%A4%E3%83%A9%E3%83%BC%E3%81%AE%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88\" aria-label=\"トランスパイラーの置き換え permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>トランスパイラーの置き換え</h2>\n<p>プロダクトコードとテストがTypeScriptで記述されていたため、トランスパイラーを置き換えることでコスト低く高速化することを狙った。\nローカルで実行時間が2/3程度になる高速化。CIの実行時間は変化がなかった。</p>\n<h3 id=\"swcjestへの置き換え\" style=\"position:relative;\"><a href=\"#swcjest%E3%81%B8%E3%81%AE%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88\" aria-label=\"swcjestへの置き換え permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@swc/jestへの置き換え</h3>\n<p>トランスパイラーをts-jestから@swc/jestへ置き換えた。</p>\n<p>やること自体はそんな難しくなくドキュメントに記載されている通りにコンフィグを書き換える。</p>\n<p><a href=\"https://swc.rs/docs/usage/jest\">https://swc.rs/docs/usage/jest</a></p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">// jest.config.js\ntransform: {\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>  \"^.+\\\\.(t|j)sx?$\": \"ts-jest\",\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>  \"^.+\\\\.(t|j)sx?$\": [\"@swc/jest\"],\n</span>},</code></pre></div>\n<p>次にswcの設定ファイルを配置する。</p>\n<p>NestJS特有で気をつけなければいけない点として、デコレータ周りの設定（legacyDecorator, decoratorMetadata）をきちんとかかないと動かない。\npathsはtsconfigに設定されているものをそのままコピペして配置。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// .swcrc\n{\n  \"jsc\": {\n    \"parser\": {\n      \"syntax\": \"typescript\",\n      \"decorators\": true\n    },\n    \"target\": \"es2020\",\n    \"keepClassNames\": true,\n    \"transform\": {\n      \"legacyDecorator\": true,\n      \"decoratorMetadata\": true\n    },\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@common/*\": [\"./src/common/*\"],\n      \"@test/*\": [\"./src/test/*\"],\n    }\n  },\n  \"sourceMaps\": true\n}</code></pre></div>\n<p>また、追加で今回はTypeORM特有のつまづきポイントがあった。</p>\n<p><a href=\"https://github.com/swc-project/swc/issues/1160\">https://github.com/swc-project/swc/issues/1160</a></p>\n<p>tscでトランスパイルすると <code class=\"language-text\">@Column()</code> と書いていても自動的に型を推論してくれるが、swcがトランスパイルの仕方が違うため、TypeORMが解釈できない形に変換されてしまっていた。</p>\n<p>これは <code class=\"language-text\">@Column({ type: \"varchar\" })</code> のように詳細に型を指定してあげると回避できた。</p>\n<h3 id=\"vitestへの置き換え検証\" style=\"position:relative;\"><a href=\"#vitest%E3%81%B8%E3%81%AE%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E6%A4%9C%E8%A8%BC\" aria-label=\"vitestへの置き換え検証 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vitestへの置き換え検証</h3>\n<p>swcより先にvitestを試した。jestと互換性があるということで気軽に試してみたが、案外書き換えも必要+NestJSではうまく動作しない部分があり断念した。</p>\n<p>断念理由1: esbuildがサポートしてないデコレータがある</p>\n<p>vitestが内部で採用しているesbuildがいくつかデコレータの書き方に対応していなかった。</p>\n<p><a href=\"https://github.com/vitest-dev/vitest/issues/708\">https://github.com/vitest-dev/vitest/issues/708</a>\n<a href=\"https://github.com/evanw/esbuild/issues/257#issuecomment-658053616\">https://github.com/evanw/esbuild/issues/257#issuecomment-658053616</a></p>\n<p>ここはプロダクトコードの方のデコレータの書き方を直すことでデコレータ部分まではクリアできたが、次にあげるモジュール解決の問題が発生した。</p>\n<p>断念理由2: ECMA Firstで解釈してしまう。</p>\n<p>vitestはテスト実行時にモジュールをECMA Modulesとして解釈してしまう。</p>\n<p><a href=\"https://github.com/vitest-dev/vitest/issues/846\">https://github.com/vitest-dev/vitest/issues/846</a></p>\n<p>これも.mtsやpackage.jsonの指定でECMA Modules扱いにしてしまうというのも試したが、本番の動作に影響が出てしまう可能性を考えると、テストのためだけにやるのは少しコスト高いと判断した。</p>\n<p>また、ECMA Modulesとして読み込もうとするとnode_modules以下のCommonJSモジュールと不整合が出る部分の対処も必要で、クリアできそうではあるが今回は少々コスト過多になりそうという印象を受けたので撤退した。</p>\n<h2 id=\"テストの並列化\" style=\"position:relative;\"><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E4%B8%A6%E5%88%97%E5%8C%96\" aria-label=\"テストの並列化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>テストの並列化</h2>\n<p>DBつきのテストなので、もともと <code class=\"language-text\">--runInBand</code> オプションで直列に実行されていた。なのでまずはこのオプションを外す戦略をたてた。</p>\n<p>DBのテストを並列に実行する手法は、愚直に並列数分のDBを用意して、テストのDB接続時にそれぞれ競合しないDBに接続させる方法を採用した。\nリソースの消費は大きく富豪的な発想だがシンプルでわかりやすいため、メンテナンスもそこまで難しくないだろうという理由。</p>\n<h3 id=\"runinbandの削除とworker数の制限\" style=\"position:relative;\"><a href=\"#runinband%E3%81%AE%E5%89%8A%E9%99%A4%E3%81%A8worker%E6%95%B0%E3%81%AE%E5%88%B6%E9%99%90\" aria-label=\"runinbandの削除とworker数の制限 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>runInBandの削除とworker数の制限</h3>\n<p>jestはデフォルトだと (コア数 - 1) 個のworkerを生成する。ただ、自分の環境は16コアだったので out of memory が発生してしまった。\n最近の開発者の環境だとコア8個以上は当たり前になりつつあるし、 <code class=\"language-text\">--maxWorkers=4</code> を追加してworkerを4つまでに制限した。</p>\n<p>今回はDBをdocker-comopseで立ち上げていたので、一つのDBインスタンスにDB名を分けるという形でworkerの接続席を分けることにした。</p>\n<p>テストDBの事前準備をどうしようかなという部分がまだちゃんと煮詰まっていないが、pretest時にmigrationを流すスクリプトを作成した。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"pretest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"WORKER_NUM=4 NODE_ENV=test yarn ts-node ./src/test/bin/setup-db.ts\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=test jest --maxWorkers=4\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> promisify <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"util\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> execFile<span class=\"token punctuation\">,</span> exec <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"child_process\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createConnection<span class=\"token punctuation\">,</span> getConnectionOptions <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"typeorm\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> execFileAsync <span class=\"token operator\">=</span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span>execFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> execAsync <span class=\"token operator\">=</span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span>exec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">WORKER_NUM</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">WORKER_NUM</span> <span class=\"token operator\">?</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">WORKER_NUM</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TYPEORM_HOST</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">TYPEORM_HOST</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"dbname\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TYPEORM_USERNAME</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">TYPEORM_USERNAME</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TYPEORM_DATABASE</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">TYPEORM_DATABASE</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PGPASSWORD</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">TYPEORM_PASSWORD</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runMigrate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">databaseName</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[migrate:start] </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>databaseName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> env <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">,</span> <span class=\"token constant\">PGPASSWORD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> timeout <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// dbの存在チェック</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> stdout <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">execAsync</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">psql -U </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">TYPEORM_USERNAME</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -h </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">TYPEORM_HOST</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">TYPEORM_DATABASE</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -c \"SELECT datname FROM pg_database WHERE datname = '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>databaseName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> timeout<span class=\"token punctuation\">,</span> env <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[exists] </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>databaseName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// dbが存在していたらdrop</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>databaseName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">execFileAsync</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"dropdb\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">\"-h\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TYPEORM_HOST</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-U\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TYPEORM_USERNAME</span><span class=\"token punctuation\">,</span> databaseName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> timeout<span class=\"token punctuation\">,</span> env <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[dropdb] </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>databaseName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// createdb</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">execFileAsync</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"createdb\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"-h\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TYPEORM_HOST</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-U\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TYPEORM_USERNAME</span><span class=\"token punctuation\">,</span> databaseName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> timeout<span class=\"token punctuation\">,</span> env <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[createdb] </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>databaseName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// TypeORMのmigrate</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getConnectionOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> databaseName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[runMigrations:start] </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>databaseName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">runMigrations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transaction</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[runMigrations:end] </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>databaseName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span> <span class=\"token keyword\">await</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[migrate:end] </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>databaseName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// jestのworkerは1始まりなので1始まりのsuffixをつけたDB名をつける</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDatabaseNames</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">workerNumber</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>workerNumber<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test_db\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prefix<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> names<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runAllMigrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token function\">getDatabaseNames</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WORKER_NUM</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">runMigrate</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">runAllMigrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>テストの方ではこのセットアップスクリプトで作ったDBに接続するようにbeforeEachを書き換える。\njestはJEST_WORKER_IDという環境変数にworkerの番号が入っているため、これを使って振り分けることにした。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDatabaseName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> databaseName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">test_db_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> databaseName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">JEST_WORKER_ID</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> databaseName <span class=\"token operator\">=</span> <span class=\"token function\">getDatabaseName</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">setupDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> databaseName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">--maxWorkers=4</code> にするとJEST_WORKER_IDには1~4までの数字が入るので <code class=\"language-text\">test_db_1</code> ~ <code class=\"language-text\">test_db_4</code> までのDBをかぶらずに使用できる。</p>\n<p>この修正でローカルでのテスト実行速度が3倍速くらいになった。理論上workerの数を増やせばいくらでも高速化できるが、現実的にはDBのリソースもじゃぶじゃぶ使うし、メモリの使用量がボトルネックになりそう。</p>\n<p>また、ローカルのテストは高速化したがCIではむしろ実行時間が悪化した。</p>\n<p>これは公式ドキュメントにものっているが、CIやコンテナなど特定の環境で遅くなるケースがあるらしい。</p>\n<p><a href=\"https://jestjs.io/docs/28.0/troubleshooting#tests-are-extremely-slow-on-docker-andor-continuous-integration-ci-server\">参照</a></p>\n<p>これの解決策に <code class=\"language-text\">--runInBand</code> を利用してくれとあったが、それではこの施策の意味がないため、CIでは別の方法を使って分割することにした。</p>\n<h2 id=\"ciの並列化\" style=\"position:relative;\"><a href=\"#ci%E3%81%AE%E4%B8%A6%E5%88%97%E5%8C%96\" aria-label=\"ciの並列化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CIの並列化</h2>\n<p>workerを増やした並列化はCIでは出来ないという事がわかったので、jest v28から加わった <code class=\"language-text\">--shard</code> オプションを利用した。</p>\n<p><a href=\"https://jestjs.io/docs/28.0/cli#--shard\">https://jestjs.io/docs/28.0/cli#—shard</a></p>\n<p>shardはテストの実行を単純に分割できるオプションです。<code class=\"language-text\">--shard=1/4</code>とすると最初の1/4だけ実行します。\nつまり <code class=\"language-text\">--shard=1/4</code>, <code class=\"language-text\">--shard=2/4</code>, <code class=\"language-text\">--shard=3/4</code>, <code class=\"language-text\">--shard=4/4</code> とした CI を4つ実行すれば並列に実行できるということになる。</p>\n<p>Github Actionsではmatrixを使うと同じstepを別の引数で実行できる。</p>\n<p>これを使って次のようにshardオプションを呼び分けるようにすると、全てのテストが実行可能かつ並列に実行可能となる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># ci.yml\ntest-backend:\n  runs-on: ubuntu-latest\n  strategy:\n    matrix:\n      shard: [1, 2, 3, 4]\n  services:\n    postgres:\n      image: postgres\n      ports:\n        - 5432:5432\n  steps:\n~~~\n    - name: Test Backend\n      run: NODE_ENV=test jest --maxWorkers=1 --shard=${{ matrix.shard }}/${{ strategy.job-total }}</code></pre></div>\n<p>この設定を入れることでtest-backendが4つ実行されるようになる。時間が遅くなったらさらにshard配列を増やしていけばよいだけとシンプル。</p>\n<p>servicesでmartixごとに1つのDBを用意する形式になるので、全てのテストは <code class=\"language-text\">test_db_1</code> につなぐのがローカルの実行との違いになる。\nこの分け方はローカルと違ってリソースの上限がかかりにくくスケールが容易そうなので4つ以上の分割もできそうなのがいいところ。</p>\n<p>他のプロダクトでjestを使ってるときにも、maxWorkersで引っかかったことがあるのでCIではmaxWorkersは1にするのがベストプラクティスといえそう。</p>\n<p>ひとまず4分割にして実行したらCIでも3倍くらい速くなった。</p>\n<p>ローカルでもshardオプションで実行しても良かったが、shardで分割すると結果も分割されて表示されてしまうので、最終的な結果が見にくくなった。\nなので、ローカルではmaxWorkers、CIはshardというのがよいのではないかと考えている。</p>\n<h1 id=\"おまけ\" style=\"position:relative;\"><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91\" aria-label=\"おまけ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>おまけ</h1>\n<p>ts-nodeを使ってる箇所もswcを利用するモードにしたらスクリプトの実行時間も3倍くらい速くなった。</p>\n<p><a href=\"https://typestrong.org/ts-node/docs/swc/\">https://typestrong.org/ts-node/docs/swc/</a></p>\n<p>ここはesbuild/registerでもよいとは思うが、swcとesbuildの2つのトランスパイラーを入れるのが嫌だったので、今回はts-node + swcを採用した。</p>\n<h1 id=\"おわりに\" style=\"position:relative;\"><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\" aria-label=\"おわりに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>おわりに</h1>\n<p>NestJS + jestのDBつきテスト高速化を@swc/jestと並列化で達成した。</p>\n<p>当たり前だけど、なんだかんだ並列化の設計をすることが一番効果高い。</p>\n<p>トランスパイラーまわりの高速化も無視できない程度には効果があるが、やはり互換性がない部分がまだあるため、最後のチェックはtscを信じろにしたほうがリスクが少なそう。\n自分はプロダクションビルドではtsc、テストや開発のみトランスパイラーを交換して高速化というスタイルをしばらく続けると思う。</p>\n<p>esbuildはデコレータ処理が出てくると現時点では厳しいかもしれないので、viteよりswcが優勢か？という感想だったが、コミュニティの勢い的にはviteの方が盛り上がっているように感じるため、この辺は注視していく必要がありそう。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E8%AA%B2%E9%A1%8C\">課題</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%89%8D%E6%8F%90\">前提</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%9C%80%E7%B5%82%E7%B5%90%E6%9E%9C\">最終結果</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%88%A6%E7%95%A5\">戦略</a></p>\n<ul>\n<li>\n<p><a href=\"#%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B9%E3%83%91%E3%82%A4%E3%83%A9%E3%83%BC%E3%81%AE%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88\">トランスパイラーの置き換え</a></p>\n<ul>\n<li><a href=\"#swcjest%E3%81%B8%E3%81%AE%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88\">@swc/jestへの置き換え</a></li>\n<li><a href=\"#vitest%E3%81%B8%E3%81%AE%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E6%A4%9C%E8%A8%BC\">vitestへの置き換え検証</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E4%B8%A6%E5%88%97%E5%8C%96\">テストの並列化</a></p>\n<ul>\n<li><a href=\"#runinband%E3%81%AE%E5%89%8A%E9%99%A4%E3%81%A8worker%E6%95%B0%E3%81%AE%E5%88%B6%E9%99%90\">runInBandの削除とworker数の制限</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ci%E3%81%AE%E4%B8%A6%E5%88%97%E5%8C%96\">CIの並列化</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91\">おまけ</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\">おわりに</a></p>\n</li>\n</ul>","frontmatter":{"title":"jestでDBありのテストを高速化する","date":"2022-07-02"}}},"pageContext":{"slug":"/2022-07-02-jest-speedup/","previous":{"fields":{"slug":"/2020-10-24-lighthouse-ci/"},"frontmatter":{"title":"Lighthouse CIでサイトのスコアを定期的にチェックしよう"}},"next":{"fields":{"slug":"/2022-11-17-typeorm/"},"frontmatter":{"title":"TypeORM v0.3へのバージョンアップ方法"}}}},"staticQueryHashes":["1366176228","3128451518"],"slicesMap":{}}