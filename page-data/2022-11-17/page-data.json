{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-11-17/","result":{"data":{"site":{"siteMetadata":{"title":"kohsweblog","author":"koh110"}},"markdownRemark":{"id":"034d8b67-be39-52c8-962f-aa7a6a620a01","excerpt":"TypeORMのアップデート NestJSで利用しているTypeORMのバージョンをv0.2からv0.3に引き上げた。\nv0.3ではかなりの破壊的変更が入っていたため、結構大変な作業だったのでやり方と方針を備忘録にまとめる。 TypeORMリリースノート 個人的におおきな破壊的変更は次の…","html":"<h1 id=\"typeormのアップデート\" style=\"position:relative;\"><a href=\"#typeorm%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88\" aria-label=\"typeormのアップデート permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeORMのアップデート</h1>\n<p>NestJSで利用しているTypeORMのバージョンをv0.2からv0.3に引き上げた。\nv0.3ではかなりの破壊的変更が入っていたため、結構大変な作業だったのでやり方と方針を備忘録にまとめる。</p>\n<p><a href=\"https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#030-2022-03-17\">TypeORMリリースノート</a></p>\n<p>個人的におおきな破壊的変更は次の3つ</p>\n<ol>\n<li>データベースのつなぎ方がConnectionからDataSourceという仕組みに変更</li>\n<li>CustomRepositoryの定義方法がclassからobjectに変更</li>\n<li>findのwhereが <code class=\"language-text\">{ id: undefined }</code> の時の返却値が、空配列から全件取得に変更</li>\n</ol>\n<h2 id=\"connectionからdatasourceに変更\" style=\"position:relative;\"><a href=\"#connection%E3%81%8B%E3%82%89datasource%E3%81%AB%E5%A4%89%E6%9B%B4\" aria-label=\"connectionからdatasourceに変更 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ConnectionからDataSourceに変更</h2>\n<p>データベースへの接続がDataSourceオブジェクトを生成する形に変更された。\nまた<code class=\"language-text\">ormconfig.js</code>ファイルから自動で読み込む仕組みがなくなったため、configファイルを直接importで指定する必要がある。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> ormconfig <span class=\"token keyword\">from</span> <span class=\"token string\">'./ormconfig'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">(</span>ormconfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">await</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>configファイルを直接指定する形式になったので、JavaScript(<code class=\"language-text\">ormconfig.js</code>)からTypeScript(<code class=\"language-text\">ormconfig.ts</code>)に置き換えた。</p>\n<p>NestJSのTypeORMモジュールではDataSourceオブジェクトの生成からconnectまでを内部でやってくれている。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// app.module.ts</span>\n<span class=\"token keyword\">import</span> ormconfig <span class=\"token keyword\">from</span> <span class=\"token string\">'./ormconfig'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ここで直接ormconfigを指定する形に</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"customrepositoryの定義方法がobjectに変更\" style=\"position:relative;\"><a href=\"#customrepository%E3%81%AE%E5%AE%9A%E7%BE%A9%E6%96%B9%E6%B3%95%E3%81%8Cobject%E3%81%AB%E5%A4%89%E6%9B%B4\" aria-label=\"customrepositoryの定義方法がobjectに変更 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CustomRepositoryの定義方法がobjectに変更</h2>\n<p>元々のCustomRepositoryの定義方法はclassに対してEntityRepositoryデコレータでEntityを紐づける形。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> EntityRepository<span class=\"token punctuation\">,</span> Repository <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typeorm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BarEntity <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./bar.entity'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">EntityRepository</span><span class=\"token punctuation\">(</span>BarEntity<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BarRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Repository</span><span class=\"token operator\">&lt;</span>BarEntity<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">fineBarWithQuery</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>これがdataSourceオブジェクトから生成する形に変更になった。</p>\n<p><code class=\"language-text\">dataSource.getRepository(Entity).extends({ ... })</code></p>\n<p>この書き換えで課題になるのは「dataSoureオブジェクトをどうやってCustomRepositoryファイルに渡すか」という点。</p>\n<p>repositoryファイルの中で<code class=\"language-text\">new DataSource()</code>するのはコネクションを多重接続してしまうのでなし。</p>\n<p>次に考えられるのは別ファイルで<code class=\"language-text\">export const dataSource = new DataSource()</code>したものをimportする方法。\nしかしこれをやるとNestJS側で生成しているコネクションと2重になってしまった時にトランザクションがどのように動くか分からなかった。</p>\n<p>そのため、NestJSが生成したdataSourceをCustomRepositoryに渡す必要がある。\nなのでFactoryを作成して、NestJSにはproviderで直接指定する形を採用することにした。</p>\n<p>先ほどのサンプルを書き換えると次のような形になる</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DataSource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typeorm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getDataSourceToken<span class=\"token punctuation\">,</span> getCustomRepositoryToken <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/typeorm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> FactoryProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BarEntity <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./bar.entity'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// classの代わりの型定義</span>\n<span class=\"token keyword\">export</span> type BarRepositoryType <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> BarRepositoryFactory<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// dataSourceを受け取るためのfactory</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BarRepositoryFactory</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">dataSource</span><span class=\"token operator\">:</span> DataSource</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>BarEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">fineBarWithQuery</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// NestJSに注入するためProvider</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">BarRepositoryProvider</span><span class=\"token operator\">:</span> FactoryProvider<span class=\"token operator\">&lt;</span>BarRepositoryType<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">provide</span><span class=\"token operator\">:</span> <span class=\"token function\">getCustomRepositoryToken</span><span class=\"token punctuation\">(</span>BarRepositoryFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">useFactory</span><span class=\"token operator\">:</span> BarRepositoryFactory<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">getDataSourceToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>NestJSがわは元々<code class=\"language-text\">TypeOrmModule.forFeature([...])</code>の引数にCustomRepositoryのクラスを指定することで自動的にDIなどができた。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TypeOrmModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/typeorm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BarRepository <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./bar.repository'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forFeature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>BarRepository<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">providers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>FooService<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FooModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>今回のアップデートでforFeatureへの指定ができなくなってしまったため、providersで直接指定する形に変更する。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TypeOrmModule<span class=\"token punctuation\">,</span> getDataSourceToken <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/typeorm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BarRepositoryProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./bar.repository'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forFeature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">providers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    FooService<span class=\"token punctuation\">,</span>\n    BarRepositoryProvider\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FooModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Providerに直接指定するためには、どのインスタンスが同一のものかを判定するためにprovideに一意な文字列が必要になる。\nTypeORMモジュールのコードを読んでみると、classの頃は<code class=\"language-text\">class.name</code>を内部的に参照していた。</p>\n<p>同様にFactoryのnameを一意な値として利用すればよいかと考えたが、コードを読んでいたらたまたまTypeORM側に<code class=\"language-text\">getCustomRepositoryToken</code>というutilメソッドが用意されているのを発見したのでそちらを利用する形にした。</p>\n<p><a href=\"https://github.com/nestjs/typeorm/blob/9432329a7c5da4e5866af3b8ed2ef712c909e931/lib/common/typeorm.utils.ts#L61-L66\">getCustomRepositoryToken</a></p>\n<p>動作だけなら<code class=\"language-text\">Factory.name</code>や一意な文字列を与えればよいが、今後自分以外がいじる際にルールを守れるかという点が気になったため、意図を明示できる関数を利用する方向にした。</p>\n<p>NestJSの内部で生成されたDataSourceをFactoryの引数に与えるためには<code class=\"language-text\">getDataSourceToken</code>を利用する。</p>\n<p><a href=\"https://github.com/nestjs/typeorm/blob/9432329a7c5da4e5866af3b8ed2ef712c909e931/lib/common/typeorm.utils.ts#L74-L87\">getDataSourceToken</a></p>\n<p><code class=\"language-text\">getDataSourceToken</code>をinjectに与える事で、NestJSのセットアップ時に<code class=\"language-text\">BarRepositoryFactory</code>に内部で生成されたdataSourceの参照が注入される。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// NestJSに注入するためProvider</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">BarRepositoryProvider</span><span class=\"token operator\">:</span> FactoryProvider<span class=\"token operator\">&lt;</span>BarRepositoryType<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">provide</span><span class=\"token operator\">:</span> <span class=\"token function\">getCustomRepositoryToken</span><span class=\"token punctuation\">(</span>BarRepositoryFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">useFactory</span><span class=\"token operator\">:</span> BarRepositoryFactory<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">getDataSourceToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最後にCustomRepositoryを使ってたServiceの改修をする。</p>\n<p>元々はimportしたclassをそのままコンストラクタに指定してするとNestJSが判断してDIしてくれていた。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BarRepository <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./bar.repository'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FooService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\"><span class=\"token keyword\">private</span> <span class=\"token literal-property property\">repository</span><span class=\"token operator\">:</span> BarRepository</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>これを明示的にDI指定するためにInjectアノテーションに直接<code class=\"language-text\">getCustomRepositoryToken</code>とFactoryから生成した文字列を与える。\nこれでprovidersの中で指定したprovideと文字列が一致するのでDIされるようになる。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable<span class=\"token punctuation\">,</span> Inject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getCustomRepositoryToken <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/typeorm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  BarRepositoryFactory<span class=\"token punctuation\">,</span>\n  BarRepositoryType\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./bar.repository'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FooService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    @<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span>BarRepositoryInjectName<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">repository</span><span class=\"token operator\">:</span> BarRepositoryType <span class=\"token comment\">// classじゃなくなったのでFactoryのReturnTypeで返ってきたオブジェクトを型にする</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> repo <span class=\"token operator\">=</span> <span class=\"token function\">getManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCustomRepository</span><span class=\"token punctuation\">(</span>BarRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">const</span> repo <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span>manager<span class=\"token punctuation\">.</span><span class=\"token function\">withRepository</span><span class=\"token punctuation\">(</span>BarRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"findのwhere条件を変更\" style=\"position:relative;\"><a href=\"#find%E3%81%AEwhere%E6%9D%A1%E4%BB%B6%E3%82%92%E5%A4%89%E6%9B%B4\" aria-label=\"findのwhere条件を変更 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>findのwhere条件を変更</h2>\n<p>動的にfind条件を変更するメソッドで <code class=\"language-text\">{ id: undefined }</code> になるパターンがあった。</p>\n<p>この時、v0.2では空配列（=該当なし）として扱われていたが、v0.3ではデータ全件（=条件の指定なし）にさらっと変更されていた。（ドキュメントに記載見当たらず）</p>\n<p>まるきり逆の挙動になってる上に、全件取得という結構な負荷が出そうな変更がさらっとされていてかなり驚いた。</p>\n<p>テスト書いてあって助かった。</p>\n<h1 id=\"感想\" style=\"position:relative;\"><a href=\"#%E6%84%9F%E6%83%B3\" aria-label=\"感想 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>感想</h1>\n<p>個人的にCustomRepositoryが一番大きな破壊的変更だった。</p>\n<p>変更後の方がclassもアノテーションを用いずに個人的にはきれいで好み。\nだが、なぜこのタイミングでこれだけ設計全体に影響を与える大きな破壊的変更を加えたのかは疑問を持った。</p>\n<p><a href=\"https://github.com/typeorm/typeorm/issues/9013\">issue</a>でも同様の意見があがっていたが、なぜという疑問に回答はなかった。</p>\n<p>v0のアプリケーションなので破壊的変更が加わるのは仕方ないとは思うが、もう少しmigrationのコストが低くないと脱落する人が出てきそうという感想をもった。</p>\n<p>NestJSではTypeORMが標準的な扱いを受けているところもあるので、今後もカジュアルに破壊的変更がされるとなると少し採用に慎重な姿勢を持ってしまいそうである。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#typeorm%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88\">TypeORMのアップデート</a></p>\n<ul>\n<li><a href=\"#connection%E3%81%8B%E3%82%89datasource%E3%81%AB%E5%A4%89%E6%9B%B4\">ConnectionからDataSourceに変更</a></li>\n<li><a href=\"#customrepository%E3%81%AE%E5%AE%9A%E7%BE%A9%E6%96%B9%E6%B3%95%E3%81%8Cobject%E3%81%AB%E5%A4%89%E6%9B%B4\">CustomRepositoryの定義方法がobjectに変更</a></li>\n<li><a href=\"#find%E3%81%AEwhere%E6%9D%A1%E4%BB%B6%E3%82%92%E5%A4%89%E6%9B%B4\">findのwhere条件を変更</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%84%9F%E6%83%B3\">感想</a></p>\n</li>\n</ul>","frontmatter":{"title":"TypeORM v0.3へのバージョンアップ方法","date":"2022-11-17"}}},"pageContext":{"slug":"/2022-11-17/","previous":{"fields":{"slug":"/2022-07-02-jest-speedup/"},"frontmatter":{"title":"jestでDBありのテストを高速化する"}},"next":null}},"staticQueryHashes":["1366176228","3128451518"],"slicesMap":{}}